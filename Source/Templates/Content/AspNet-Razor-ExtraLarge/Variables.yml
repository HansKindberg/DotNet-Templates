variables:
  # Requires the following pipeline secrets. The *_IMAGE_REGISTRY_TOKEN and the *_KUBERNETES_API_TOKEN may be the same if you for example use the internal OpenShift registry as image registry.
  # DEVELOPMENT_IMAGE_REGISTRY_TOKEN
  # DEVELOPMENT_KUBERNETES_API_TOKEN
  # PRODUCTION_IMAGE_REGISTRY_TOKEN
  # PRODUCTION_KUBERNETES_API_TOKEN

  _GIT_HASH: ${BUILD_SOURCEVERSION:0:8} # Only works on a Linux pool, not on a Windows pool, https://hanskindberg.wordpress.com/2023/12/20/get-short-commit-hash-in-azure-devops-pipeline-2/.
  _IMAGE_PATH_FORMAT: "/aspnet-razor{0}/application:{1}$(_GIT_HASH)" # An example when using the internal OpenShift registry, the first part should be the project-name/namespace-name. If using Docker hub this would probably be something like "/company-name/application:{0}$(_GIT_HASH)".

  CONTAINER_NAME: "application" # Will be used as identifier in the Template.yml.
  KUBERNETES_TEMPLATE_FILE_PATH: "$(Build.SourcesDirectory)/.kubernetes/Template.yml" # Path to the Kubernetes template file.

  PRODUCTION_HOST: "application.example.org"
  PRODUCTION_IMAGE_PULL_REGISTRY: "image-pull-registry.prod.example.org" # The registry to pull from. Differs from the registry to push to when using the OpenShift registry. The same as the registry to push to when using Docker hub, eg. docker.io/organization/the-image:latest.
  PRODUCTION_IMAGE_PUSH_REGISTRY: "image-push-registry.prod.example.org" # The registry to push to. Differs from the registry to pull from when using the OpenShift registry. The same as the registry to pull from when using Docker hub, eg. docker.io/organization/the-image:latest.
  PRODUCTION_IMAGE_PATH: "$[format(variables['_IMAGE_PATH_FORMAT'], '-production', '')]"
  PRODUCTION_IMAGE_PULL: "$(PRODUCTION_IMAGE_PULL_REGISTRY)$(PRODUCTION_IMAGE_PATH)"
  PRODUCTION_IMAGE_PUSH: "$(PRODUCTION_IMAGE_PUSH_REGISTRY)$(PRODUCTION_IMAGE_PATH)"
  PRODUCTION_KUBERNETES_API_URL: "kubernetes-api.prod.example.org"
  PRODUCTION_REPLICAS: 2 # REPLICAS - the number of nodes for the load-balancing

  STAGE_HOST: "application-stage.example.org"
  STAGE_IMAGE_PULL_REGISTRY: "image-pull-registry.dev.example.org"
  STAGE_IMAGE_PUSH_REGISTRY: "image-push-registry.dev.example.org"
  STAGE_IMAGE_PATH: "$[format(variables['_IMAGE_PATH_FORMAT'], '-stage', 'stage-')]"
  STAGE_IMAGE_PULL: "$(STAGE_IMAGE_PULL_REGISTRY)$(STAGE_IMAGE_PATH)"
  STAGE_IMAGE_PUSH: "$(STAGE_IMAGE_PUSH_REGISTRY)$(STAGE_IMAGE_PATH)"
  STAGE_KUBERNETES_API_URL: "kubernetes-api.dev.example.org"
  STAGE_REPLICAS: 2

  TEST_HOST: "application-test.example.org"
  TEST_IMAGE_PULL_REGISTRY: "$(STAGE_IMAGE_PULL_REGISTRY)"
  TEST_IMAGE_PUSH_REGISTRY: "$(STAGE_IMAGE_PUSH_REGISTRY)"
  TEST_IMAGE_PATH: "$[format(variables['_IMAGE_PATH_FORMAT'], '-test', 'test-')]"
  TEST_IMAGE_PULL: "$(TEST_IMAGE_PULL_REGISTRY)$(TEST_IMAGE_PATH)"
  TEST_IMAGE_PUSH: "$(TEST_IMAGE_PUSH_REGISTRY)$(TEST_IMAGE_PATH)"
  TEST_KUBERNETES_API_URL: "$(STAGE_KUBERNETES_API_URL)"
  TEST_REPLICAS: 1

  # Example if docker.io
  # --------------------------------------
  # _IMAGE_PATH_FORMAT: "/company-name/application:{0}$(_GIT_HASH)"

  # PRODUCTION_IMAGE_PULL_REGISTRY: "docker.io"
  # PRODUCTION_IMAGE_PUSH_REGISTRY: "$(PRODUCTION_IMAGE_PULL_REGISTRY)"
  # PRODUCTION_IMAGE_PATH: "$[format(variables['_IMAGE_PATH_FORMAT'], '')]"
  # PRODUCTION_IMAGE_PULL: "$(PRODUCTION_IMAGE_PULL_REGISTRY)$(PRODUCTION_IMAGE_PATH)"
  # PRODUCTION_IMAGE_PUSH: "$(PRODUCTION_IMAGE_PUSH_REGISTRY)$(PRODUCTION_IMAGE_PATH)"

  # STAGE_IMAGE_PULL_REGISTRY: "$(PRODUCTION_IMAGE_PULL_REGISTRY)"
  # STAGE_IMAGE_PUSH_REGISTRY: "$(PRODUCTION_IMAGE_PUSH_REGISTRY)"
  # STAGE_IMAGE_PATH: "$[format(variables['_IMAGE_PATH_FORMAT'], 'stage-')]"
  # STAGE_IMAGE_PULL: "$(STAGE_IMAGE_PULL_REGISTRY)$(STAGE_IMAGE_PATH)"
  # STAGE_IMAGE_PUSH: "$(STAGE_IMAGE_PUSH_REGISTRY)$(STAGE_IMAGE_PATH)"

  # TEST_IMAGE_PULL_REGISTRY: "$(STAGE_IMAGE_PULL_REGISTRY)"
  # TEST_IMAGE_PUSH_REGISTRY: "$(STAGE_IMAGE_PUSH_REGISTRY)"
  # TEST_IMAGE_PATH: "$[format(variables['_IMAGE_PATH_FORMAT'], 'test-')]"
  # TEST_IMAGE_PULL: "$(TEST_IMAGE_PULL_REGISTRY)$(TEST_IMAGE_PATH)"
  # TEST_IMAGE_PUSH: "$(TEST_IMAGE_PUSH_REGISTRY)$(TEST_IMAGE_PATH)"

  # Example if internal OpenShift registry
  # --------------------------------------
  # _IMAGE_PATH_FORMAT: "/aspnet-razor{0}/application:{1}$(_GIT_HASH)"

  # PRODUCTION_IMAGE_PULL_REGISTRY: "image-registry.openshift-image-registry.svc:5000"
  # PRODUCTION_IMAGE_PUSH_REGISTRY: "default-route-openshift-image-registry.apps.prod.example.org"
  # PRODUCTION_IMAGE_PATH: "$[format(variables['_IMAGE_PATH_FORMAT'], '-production', '')]"
  # PRODUCTION_IMAGE_PULL: "$(PRODUCTION_IMAGE_PULL_REGISTRY)$(PRODUCTION_IMAGE_PATH)"
  # PRODUCTION_IMAGE_PUSH: "$(PRODUCTION_IMAGE_PUSH_REGISTRY)$(PRODUCTION_IMAGE_PATH)"

  # STAGE_IMAGE_PULL_REGISTRY: "$(PRODUCTION_IMAGE_PULL_REGISTRY)"
  # STAGE_IMAGE_PUSH_REGISTRY: "default-route-openshift-image-registry.apps.dev.example.org"
  # STAGE_IMAGE_PATH: "$[format(variables['_IMAGE_PATH_FORMAT'], '-stage', 'stage-')]"
  # STAGE_IMAGE_PULL: "$(STAGE_IMAGE_PULL_REGISTRY)$(STAGE_IMAGE_PATH)"
  # STAGE_IMAGE_PUSH: "$(STAGE_IMAGE_PUSH_REGISTRY)$(STAGE_IMAGE_PATH)"

  # TEST_IMAGE_PULL_REGISTRY: "$(STAGE_IMAGE_PULL_REGISTRY)"
  # TEST_IMAGE_PUSH_REGISTRY: "$(STAGE_IMAGE_PUSH_REGISTRY)"
  # TEST_IMAGE_PATH: "$[format(variables['_IMAGE_PATH_FORMAT'], '-test', 'test-')]"
  # TEST_IMAGE_PULL: "$(TEST_IMAGE_PULL_REGISTRY)$(TEST_IMAGE_PATH)"
  # TEST_IMAGE_PUSH: "$(TEST_IMAGE_PUSH_REGISTRY)$(TEST_IMAGE_PATH)"